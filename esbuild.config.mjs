import esbuild from 'esbuild';
import process from 'process';
import builtins from 'builtin-modules';
import path from 'path';
import fs from 'fs';

const banner =
`
// THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
// if you want to view the source, please visit the github repository of this plugin
`;

const prod = process.argv[2] === 'production';
const distFolder = path.resolve(process.cwd(), 'dist');
const srcFolder = path.resolve(process.cwd(), 'src');

function safeCopy(src, dest) {
  if (fs.existsSync(src)) {
    fs.copyFileSync(src, dest);
  }
}

function safeRename(src, dest) {
  if (fs.existsSync(src)) {
    fs.renameSync(src, dest);
  }
}

const context = await esbuild.context({
	banner: {js: banner},
  entryPoints: [path.join(srcFolder, 'main.ts')],
	outdir: distFolder,
	bundle: true,
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins
	],
	format: 'cjs',
	target: 'es2018',
	logLevel: 'info',
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	loader: {
		'.ttf': 'base64',
		'.css': 'css',
	}
});

if (prod) {
  await context.rebuild();

  fs.mkdirSync(distFolder, {recursive: true});

  safeCopy('manifest.json', path.join(distFolder, 'manifest.json'));
  safeRename(path.join(distFolder, 'main.css'), path.join(distFolder, 'styles.css'));

  process.exit(0);
}

else {
  await context.watch();

  safeCopy('manifest.json', path.join(distFolder, 'manifest.json'));
  safeRename(path.join(distFolder, 'main.css'), path.join(distFolder, 'styles.css'));
}
